data:
  train:
    module: torch.utils.data
    class: DataLoader
    DataLoader:
      dataset:
        module: flame.core.data.PAN_dataset
        class: PANDataset
        PANDataset:
          dirnames:
            - '''../dataset/'''
          imsize: 640
          mean: '(0., 0., 0.)'
          std: '(1., 1., 1.)'
          shrink_ratio: 0.5
          image_extents: ['''.jpg''', '''.png''', '''.jpeg''', '''.JPG''', '''.PNG''', '''.JPEG''']
          label_extent: '''.json'''
          transforms:
            # - iaa.Add(value=(-100, 100), per_channel=True)
            # - iaa.GaussianBlur(sigma=(0, 1))
            # - iaa.MotionBlur()
            - iaa.Affine(rotate=(0, 360), shear=(-20, 20), fit_output=True)
            # - iaa.PerspectiveTransform(scale=(0, 0.1))
            - iaa.Crop(percent=(0, 0.1))
            - iaa.Pad(percent=(0, 0.1))
            - iaa.JpegCompression(compression=(0, 30))
            - iaa.Rot90(k=[0, 1, 2, 3], keep_size=False)
            - iaa.Fliplr(p=0.5)
            - iaa.Flipud(p=0.5)
            # - iaa.Grayscale(alpha=(0.0, 1.0))
            # - iaa.ChangeColorTemperature()
            # - iaa.Clouds()
            # - iaa.Dropout()
          # require_transforms:
            # - iaa.Affine(rotate=(0, 20), shear=(-10, 10), fit_output=True)
            # - iaa.PerspectiveTransform(scale=(0, 0.1))
      batch_size: 2
      shuffle: True
      pin_memory: True
      num_workers: 12
      drop_last: False
      collate_fn: 'lambda batch:tuple(zip(*batch))'

  train_eval:
    module: torch.utils.data
    class: DataLoader
    DataLoader:
      dataset:
        module: flame.core.data.PAN_dataset
        class: PANDataset
        PANDataset:
          dirnames:
            - '''../dataset/'''
          imsize: 640
          mean: '(0., 0., 0.)'
          std: '(1., 1., 1.)'
          shrink_ratio: 0.5
          image_extents: ['''.jpg''', '''.png''', '''.jpeg''', '''.JPG''', '''.PNG''', '''.JPEG''']
          label_extent: '''.json'''
      batch_size: 2
      shuffle: False
      pin_memory: True
      num_workers: 12
      drop_last: False
      collate_fn: 'lambda batch:tuple(zip(*batch))'

  valid:
    module: torch.utils.data
    class: DataLoader
    DataLoader:
      dataset:
        module: flame.core.data.PAN_dataset
        class: PANDataset
        PANDataset:
          dirnames:
            - '''../dataset/'''
          imsize: 640
          mean: '(0., 0., 0.)'
          std: '(1., 1., 1.)'
          shrink_ratio: 0.5
          image_extents: ['''.jpg''', '''.png''', '''.jpeg''', '''.JPG''', '''.PNG''', '''.JPEG''']
          label_extent: '''.json'''
      batch_size: 2
      shuffle: False
      pin_memory: True
      num_workers: 12
      drop_last: False
      collate_fn: 'lambda batch:tuple(zip(*batch))'

loss:
  module: flame.core.loss.PAN_loss
  class: PANLoss
  PANLoss:
    alpha: 0.5
    beta: 0.25
    delta_agg: 0.5
    delta_dis: 3
    ohem_ratio: 3
    reduction: '''mean'''
    output_transform: 'lambda x: (x[0], x[1])'

model:
  module: flame.core.model.PAN_net
  class: PANNet
  PANNet:
    backbone_name: '''resnet18'''
    backbone_pretrained: True
    num_FPEMs: 2
    binary_threshold: 0.5
    shrink_ratio: 0.5

optim:
  module: torch.optim
  class: Adam
  Adam:
    params: config['model'].parameters()
    lr: 0.001
    weight_decay: 0.
    amsgrad: True

train_evaluator:
  module: flame.handlers.metric_evaluator
  class: MetricEvaluator
  MetricEvaluator:
    dataset: config['data']['train_eval']
    device: '''cuda'''

valid_evaluator:
  module: flame.handlers.metric_evaluator
  class: MetricEvaluator
  MetricEvaluator:
    dataset: config['data']['valid']
    device: '''cuda'''

metrics:
  module: flame.handlers.metrics.metrics
  class: Metrics
  Metrics:
    metrics:
      pan_loss:
        module: flame.handlers.metrics.losses.loss
        class: Loss
        Loss:
          loss_fn:
            module: flame.handlers.metrics.losses.PAN_loss.PAN_loss
            class: PANLoss
            PANLoss:
              alpha: 0.5
              beta: 0.25
              delta_agg: 0.5
              delta_dis: 3
              ohem_ratio: 3
              reduction: '''mean'''
          output_transform: 'lambda x: (x[0], x[1])'
    attach_to:
      train_evaluator: '''train'''
      valid_evaluator: '''valid'''

screenlogger:
  module: flame.handlers.screenlogger
  class: ScreenLogger
  ScreenLogger:
    eval_names:
      - '''train''' 
      - '''valid'''

history:
  module: flame.handlers.checkpoint
  class: History

checkpoint_loader:
  module: flame.handlers.checkpoint
  class: CheckpointLoader
  CheckpointLoader:
    checkpoint_path: ''''''
    mode: '''train'''

terminate_on_nan:
  module: flame.handlers.terminate_on_nan
  class: TerminateOnNan

lr_scheduler:
  module: flame.handlers.lr_scheduler
  class: ReduceLROnPlateau
  ReduceLROnPlateau:
    score_name: '''pan_loss'''
    evaluator_name: '''valid_evaluator'''
    mode: '''min'''
    patience: 5
    verbose: True

early_stopping:
  module: flame.handlers.early_stopping
  class: EarlyStopping
  EarlyStopping:
    score_name: '''pan_loss'''
    evaluator_name: '''valid_evaluator'''
    mode: '''min'''
    patience: 20

best_saver:
  module: flame.handlers.checkpoint
  class: BestSaver
  BestSaver:
    dirname: '''checkpoint/totaltext/'''
    score_name: '''pan_loss'''
    evaluator_name: '''valid_evaluator'''
    mode: '''min'''
    n_saved: 1

backup_saver:
  module: flame.handlers.checkpoint
  class: BackupSaver
  BackupSaver:
    modules:
      - '''model'''
      - '''optim'''
      - '''backup_saver'''
      - '''best_saver'''
      - '''history'''
      - '''lr_scheduler'''
      - '''early_stopping'''
    dirname: '''checkpoint/totaltext/'''
    save_interval: 1
    n_saved: 1

engine:
  module: flame.core.engine.engine
  class: Trainer
  Trainer:
    dataset: config['data']['train']
    device: '''cuda'''
    max_epochs: 10000

extralibs:
  iaa: imgaug.augmenters
  torch: torch
